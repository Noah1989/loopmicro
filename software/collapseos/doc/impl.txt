# Implementation notes

# Execution model

After having read a line through RDLN, we want to interpret it.
As a general rule, we go like this:

1. read single word from line
2. Can we find the word in dict?
3. If yes, execute that word, goto 1
4. Is it a number?
5. If yes, push that number to PS, goto 1
6. Error: undefined word.

# What is a word?

When parsing, we call a sequence of non-whitespace a "word",
but there's an ambiguity here because in implementation details,
"word" refers to something else.

A word is a place in memory having a particular structure. Its
first byte is a "word type" byte (see below), followed by a
structure that depends on the word type. This structure is
generally refered to as the Parameter Field (PF).

A pointer to the first byte of a word (the byte with the word
type) is called a "wordref". This is what you feed to EXECUTE.

A word is generally part of a Dictionary Entry (see below)
structure, but can be executed without it.

# Endian-ness

Unless explicitly noted, all 2 bytes numbers are written in the
CPU's native endian-ness. For example, the Z80 and 8086 are
little-endian, so they will write the low order byte before the
high order one, but the 6809 is big-endian, so it will do the
opposite.

# Stack management

In all supported arches, The Parameter Stack and Return Stack
tops are tracked by a register assigned to this purpose. For
example, in z80, it's SP and IX that do that. The value in those
registers are referred to as PS Pointer (PSP) and RS Pointer
(RSP).

Those stacks are contiguous and grow in opposite directions. PS
grows "down", RS grows "up".

# Stack underflow and overflow

In each native word involving PS popping, we check whether the
stack is big enough. If it's not we go in "uflw" (underflow)
error condition, then abort.

This means that if you implement a native word that involves
popping from PS, you are expected to call chkPS, for under-
flow situations. Every port has its own chkPS, macro which takes
one parameter: the number of items expected to be on PS. This
is called at the beginning of the word and will jump to the
uflw routine if PS isn't big enough.

Note that we don't check only for "balance difference", but for
the whole PS depth. For example, SWAP, which doesn't affect
PS size, still calls "2 chkPS," because we don't want to swap
out-of-stack items.

We don't check RS for underflow because the cost of the check
is significant and its usefulness is dubious: if RS isn't
tightly in control, we're screwed anyways, and that, well
before we reach underflow.

Overflow condition happen when RSP and PSP meet somewhere in
the middle. That check is made at each "next" call.

# Overflow counter

On some arches, such as the z80, overflow checks are really
expensive and performing them at each compiled word execution
is wasteful, when you think about the fact that most of the
time, we're really far from overflow.

So here's an idea: We do overflow check by looking at the
difference between PSP and RSP, right? That difference that we
get is a good indicator of how many executions we have in front
of us before, theoretically, we can overflow, right? So why not
save that number and skip checks for this number of times?

That's what we do with this counter. The closer we are to
overflow, the more often we check.

Not all arches use this counter because it's not worth imple-
menting this if you have quick access to PSP and RSP arithmetic,
which isn't the case on the z80.

# Dictionary entry

A dictionary entry has this structure:

- Xb name. Arbitrary long number of character (but can't be
  bigger than input buffer, of course). not null-terminated
- 2b prev offset
- 1b name size + IMMEDIATE flag (7th bit)
- A word structure, that is:
  - 1b word type
  - Parameter field (PF)

The prev offset is the number of bytes between the prev field
and the previous word's type.

The size + flag indicate the size of the name field, with the
7th bit being the IMMEDIATE flag.

The entry type is simply a number corresponding to a type which
will determine how the word will be executed. See "Word types"
below.

The vast majority of the time, a dictionary entry refers to a
word. However, sometimes, it refers to something else. A "hook
word" (see bootstrap.txt) is such an example.

# Word types

There are 7 word types in Collapse OS. Whenever you have a
wordref, it's pointing to a byte with numbers 0 to 6. This
number is the word type and the word's behavior depends on it.

0: native. This words PFA contains native binary code and is
jumped to directly.

1: compiled. This word's PFA contains a list of wordrefs and its
execution is described in "Executing a compiled word" below.

2: cell. This word is usually followed by a 2-byte value in its
PFA. Upon execution, the address of the PFA is pushed to PS.

3: DOES>. This word is created by "DOES>" and is followed
by a 2-bytes address where "DOES>" was compiled. At that address
is a wordref list exactly like in a compiled word. Upon
execution, after having pushed its cell addr to PSP (which is
2 bytes further than with a regular cell), it executes its
reference exactly like a compiled word.

4: alias. See usage.txt. PFA is like a cell, but instead of
pushing it to PS, we execute it.

5: ialias. Same as alias, but with an added indirection.

6: constant. like a cell, but with an added indirection. We
   push the 2b number that PFA points to.

# Executing a compiled word

At its core, executing a word is pushing the wordref on PS and
calling EXECUTE. Then, we let the word do its things. Some
words are special, but most of them are of the "compiled"
type, and that's their execution that we describe here.

First of all, at all time during execution, the Interpreter
Pointer (IP) points to the wordref we're executing next.

When we execute a compiled word, the first thing we do is push
IP to the Return Stack (RS). Therefore, RS' top of stack will
contain a wordref to execute next, after we EXIT.

At the end of every compiled word is an EXIT. This pops RS, sets
IP to it, and continues.

A compiled word is simply a list of wordrefs, but not all those
wordrefs are 2 bytes in length. Some wordrefs are special. For
example, a reference to (n) will be followed by an extra 2 bytes
number. It's the responsibility of the (n) word to advance IP
by 2 extra bytes.

To be clear: It's not (n)'s word type that is special, it's a
regular "native" word. It's the compilation of the (n) type,
done in LITN, that is special. We manually compile a number
constant at compilation time, which is what is expected in (n)'s
implementation. Similar special things happen in (s), (br),
(?br) and (loop).

For example, the word defined by ": FOO 345 EMIT ;" would have
an 8 bytes PF: a 2b ref to (n), 2b with 0x0159, a 2b ref to EMIT
and then a 2b ref to EXIT.

When executing this word, we first set IP to PF+2, then exec
PF+0, that is, the (n) reference. (n), when executing, reads IP,
pushes that value to PS, then advances IP by 2. This means that
when we return to the "next" routine, IP points to PF+4, which
next will execute. Before executing, IP is increased by 2, but
it's the "not-increased" value (PF+4) that is executed, that is,
EMIT. EMIT does its thing, doesn't touch IP, then returns to
"next". We're still at PF+6, which then points to EXIT. EXIT
pops RS into IP, which is the value that IP had before FOO was
called. The "next" dance continues...

# System variables

There are some core variables in the core system that are
referred to directly by their address in memory throughout the
code. The place where they live is configurable by the SYSVARS
constant in xcomp unit, but their relative offset is not. In
fact, they're mostly referred to directly as their numerical
offset along with a comment indicating what this offset refers
to.

SYSVARS occupy 0xa0 bytes in memory in addition to driver mem-
ory, which typically follows SYSVARS.

This system is a bit fragile because every time we change those
offsets, we have to be careful to adjust all system variables
offsets, but thankfully, there aren't many system variables.
Here's a list of them:

SYSVARS   FUTURE USES          +3c       BLK(*
+02       CURRENT              +3e       FUTURE USES
+04       HERE                 +41       IOERR
+06       FUTURE USES          +42       FUTURE USES
+08       FUTURE USES          +50       NL> character
+0a       FUTURE USES          +51       KEY> character
+0c       C<*                  +52       ovfl counter
+0e       WORDBUF              +53       EMIT ialias
+2e       MEM<*                +55       KEY? ialias
+30       IN>                  +57       FUTURE USES
+32       WORD LIT             +60       INPUT BUFFER
+34       BLK@*                +a0       DRIVERS
+36       BLK!*
+38       BLK>
+3a       BLKDTY

CURRENT points to the last dict entry.

HERE points to current write offset.

C<* is a C< override. If nonzero, C< calls it. Otherwise, RDLN<
is called. 

IN> is the current position in IN(, which is the input buffer.

WORDBUF is a buffer in which we read a word from input stream
during the execution of "WORD".

WORD LIT is an override for WORD. When this is non-zero, WORD
returns this address instead of reading a word from input. This
allows the use or "WORD words" such as CREATE with in-code 
literals. Example: W" foo" CREATE.

BLK* "Disk blocks" in usage.txt.

IOERR: When an error happens during I/Os, drivers can set this
to indicate an error. For example, the AT28 driver sets this
when it detects write corruption. Has to be reset to zero man-
ually after an error.

NL> is a single byte. If zero (default), NL> spits CR/LF. Other-
wise, it spits the value directly.

KEY> is the 1b "putback" buffer. See usage.txt.

KEY? and EMIT ialiases default to (key?) and (emit) but can be
overwritten to other routines.

ovfl counter is used as an optimization to minimize the number
of overflow checks in arches where it's expensive.

DRIVERS section is reserved for recipe-specific drivers.

FUTURE USES sections are unused for now.          

# Initialization sequence

(this describes the z80 boot sequence, but other arches have
a very similar sequence, and, of course, once we enter Forth
territory, identical)

On boot, we jump to the "main" routine in B289 which does
very few things.

1. Set SP to PS_ADDR and IX to RS_ADDR.
2. Set CURRENT to value of LATEST field in stable ABI.
3. Set HERE to HERESTART const if defined, to CURRENT other-
   wise.
4. Execute the word referred to by 0x04 (BOOT) in stable ABI.

In a normal system, BOOT is in core words and does a few things:

1. Initialize overrides and buffers to their default value.
2. Initialize ialiases in this way:
     EMIT -> (emit)
     KEY? -> (key?)
     NL>  -> 0 (CR then LF)
3. Set C<* to MEM< which reads from MEM<* pointer in memory.
4. Call INTERPRET which interprets boot source code until
   ASCII EOT (4) is met. This usually initializes drivers.
5. Add "_sys" entry for EMPTY to go back to.
6. Print "Collapse OS"
7. Calls (main) which:
  a. Resets C<* override
  b. Resets input buffer
  c. Run INTERPRET until EOT is met, then BYE

(main) is separate from BOOT because this word is also called by
QUIT. This way, when we ABORT during a LOAD (for example), we
go back to a usable prompt instead of being stuck in an input
nightmare maze.

If, for some reason, you need to override an ialias at some
point, you de-override it by re-setting it to the address of
the word specified at step 2.

# Stable ABI

The Stable ABI lives at the beginning of the binary and prov-
ides a way for Collapse OS code to access values that would
otherwise be difficult to access. Here's the complete list of
these references:

04 BOOT addr         06 ERR addr         08 LATEST
0a (main) addr       0c QUIT jump        0f next addr

BOOT, (main), and ERR exist because they are referred
to before those words are defined (in core words). LATEST is a
critical part of the initialization sequence.

The QUIT jump is there to provide an easy way to "bail out"
when in the middle of a native loop.

The "next addr" field is the address of the "next" native
routine (where we jump at the end of every CODE word). It is
not used during xcomp, but is needed in "Live Target" mode.
See doc/asm/intro.txt.

All Collapse OS binaries, regardless of architecture, have
those values at those offsets of them. Some binaries are built
to run at offset different than zero. This stable ABI lives at
that offset, not 0.
